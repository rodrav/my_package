ls
ls()
cd()
cd
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
```{r cars}
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
use_vignette("model_details")
library(devtools)
use_vignette("vignette")
fars_summarize_years
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?maps
install.packages("maps")
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list = c("fars_map_state", "fars_read", "fars_read_years", "fars_summarize_years", "make_filename"))
roxygen2::roxygenise()
library(testthat)
test_that('Test of make_filename function',{
expect_that(make_filename(2015), is_identical_to("accident_2015.csv.bz2"))
})
test_that('Test of make_filename function',{
expect_that(make_filename(2014), is_identical_to("accident_2014.csv.bz2"))
})
test_that('Test of make_filename function',{
expect_that(make_filename(2015), is_identical_to("accident_2015.csv.bz2"))
})
expect_that(make_filename(2015), is_identical_to("accident_2013.csv.bz2"))
cd
cd mipackage
ls
get wd
getwd
getwd()
